 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define size 100
 
 

// AVL tree node structure for Audiobook
struct Node {
    int AudiobookID;
    char Title[size];
    char Author[size];
    char Narrator[size];
    int Duration;
 
    
    char Genre[size];
    float Rating;
    int count;

    struct Node *left;
    struct Node *right;
    int heightaudiobook;
};

// AVL tree node structure for User
struct user {
    int userID;
    char Name[size];
    char Email[size];
    char Preferences[size];
    struct user *Library;

    struct user *left;
    struct user *right;
    int heightuser;
};


// Function to get the height of a node for Audiobook
int heightaudiobook(struct Node *N) {
    if (N == NULL)
        return 0;
    return N->heightaudiobook;
}

// Function to get the height of a node for User
int heightuser(struct user *N) {
    if (N == NULL)
        return 0;
    return N->heightuser;
}

// Function to get maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to create a new node with given key for Audiobook
struct Node *newNode(int AudiobookID, char Author[], char Title[], char Narrator[], float Duration, char Genre[], float Rating) {
    struct Node *node = (struct Node *)malloc(sizeof(struct Node));
    if (node == NULL) {
        printf("Memory allocation failed\n");
        return NULL;
    }
    node->AudiobookID = AudiobookID;
    strcpy(node->Author, Author);
    strcpy(node->Title, Title);
    strcpy(node->Narrator, Narrator);
    node->Duration = Duration;
    strcpy(node->Genre, Genre);
    node->Rating = Rating;
    node->count = 1;

    node->left = NULL;
    node->right = NULL;
    node->heightaudiobook = 1;
    return (node);
}

// Function to create a new node with given key for User
struct user *newUserNode(int userID, char Name[], char Email[], char Preferences[]) {
    struct user *newnode = (struct user *)malloc(sizeof(struct user));
    if (newnode == NULL) {
        printf("Memory allocation failed\n");
        return NULL;
    }
    newnode->userID = userID;
    strcpy(newnode->Name, Name);
    strcpy(newnode->Email, Email);
    strcpy(newnode->Preferences, Preferences);
    newnode->Library = NULL;

    newnode->left = NULL;
    newnode->right = NULL;
    newnode->heightuser = 1;
    return (newnode);
}

// Function to right rotate subtree rooted with y for Audiobook
struct Node *rightRotateaudiobook(struct Node *y) {
    struct Node *x = y->left;
    struct Node *T2 = x->right;

    // Perform rotation
    x->right = y;
    y->left = T2;

    // Update heights
    y->heightaudiobook = max(heightaudiobook(y->left), heightaudiobook(y->right)) + 1;
    x->heightaudiobook = max(heightaudiobook(x->left), heightaudiobook(x->right)) + 1;

    // Return new root
    return x;
}

// Function to right rotate subtree rooted with y for User
struct user *rightRotateuser(struct user *y) {
    struct user *x = y->left;
    struct user *T2 = x->right;

    // Perform rotation
    x->right = y;
    y->left = T2;

    // Update heights
    y->heightuser = max(heightuser(y->left), heightuser(y->right)) + 1;
    x->heightuser = max(heightuser(x->left), heightuser(x->right)) + 1;

    // Return new root
    return x;
}

// Function to left rotate subtree rooted with x for Audiobook
struct Node *leftRotateaudiobook(struct Node *x) {
    struct Node *y = x->right;
    struct Node *T2 = y->left;

    // Perform rotation
    y->left = x;
    x->right = T2;

    // Update heights
    x->heightaudiobook = max(heightaudiobook(x->left), heightaudiobook(x->right)) + 1;
    y->heightaudiobook = max(heightaudiobook(y->left), heightaudiobook(y->right)) + 1;

    // Return new root
    return y;
}

// Function to left rotate subtree rooted with x for User
struct user *leftRotateuser(struct user *x) {
    struct user *y = x->right;
    struct user *T2 = y->left;

    // Perform rotation
    y->left = x;
    x->right = T2;

    // Update heights
    x->heightuser = max(heightuser(x->left), heightuser(x->right)) + 1;
    y->heightuser = max(heightuser(y->left), heightuser(y->right)) + 1;

    // Return new root
    return y;
}

// Get the balance factor of a node for Audiobook
int getBalanceaudiobook(struct Node *N) {
    if (N == NULL)
        return 0;
    return heightaudiobook(N->left) - heightaudiobook(N->right);
}

// Get the balance factor of a node for User
int getBalanceuser(struct user *N) {
    if (N == NULL)
        return 0;
    return heightuser(N->left) - heightuser(N->right);
}

// Function to insert a key into AVL tree for Audiobook
struct Node *insertAudiobook(struct Node *node, int AudiobookID, char Author[], char Title[], char Narrator[], float Duration, char Genre[], float Rating) {
    // Perform the normal BST insertion
    if (node == NULL)
        return (newNode(AudiobookID, Author, Title, Narrator, Duration, Genre, Rating));

    if (AudiobookID < node->AudiobookID)
        node->left = insertAudiobook(node->left, AudiobookID, Author, Title, Narrator, Duration, Genre, Rating);
    else if (AudiobookID > node->AudiobookID)
        node->right = insertAudiobook(node->right, AudiobookID, Author, Title, Narrator, Duration, Genre, Rating);
    else // Equal keys are not allowed in BST
        return node;

    // Update height of this ancestor node
    node->heightaudiobook = 1 + max(heightaudiobook(node->left), heightaudiobook(node->right));

    // Get the balance factor of this ancestor node
    int balance = getBalanceaudiobook(node);

    // If this node becomes unbalanced, then there are four cases

    // Left Left Case
    if (balance > 1 && AudiobookID < node->left->AudiobookID)
        return rightRotateaudiobook(node);

    // Right Right Case
    if (balance < -1 && AudiobookID > node->right->AudiobookID)
        return leftRotateaudiobook(node);

    // Left Right Case
    if (balance > 1 && AudiobookID > node->left->AudiobookID) {
        node->left = leftRotateaudiobook(node->left);
        return rightRotateaudiobook(node);
    }

    // Right Left Case
    if (balance < -1 && AudiobookID < node->right->AudiobookID) {
        node->right = rightRotateaudiobook(node->right);
        return leftRotateaudiobook(node);
    }

    // return the (unchanged) node pointer
    return node;
}

// Function to insert a key into AVL tree for User
struct user *insertUser(struct user *userroot, int userID, char Name[], char Email[], char Preferences[]) {
    if (userroot == NULL) {
        return newUserNode(userID, Name, Email, Preferences);
    }
    if (userID < userroot->userID) {
        userroot->left = insertUser(userroot->left, userID, Name, Email, Preferences);
    } else if (userID > userroot->userID) {
        userroot->right = insertUser(userroot->right, userID, Name, Email, Preferences);
    } else {
        // Equal keys are not allowed in BST
        return userroot;
    }

    // Update height of this ancestor node
    userroot->heightuser = 1 + max(heightuser(userroot->left), heightuser(userroot->right));

    // Get the balance factor of this ancestor node
    int balance = getBalanceuser(userroot);

    // If this node becomes unbalanced, then there are four cases

    // Left Left Case
    if (balance > 1 && userID < userroot->left->userID)
        return rightRotateuser(userroot);

    // Right Right Case
    if (balance < -1 && userID > userroot->right->userID)
        return leftRotateuser(userroot);

    // Left Right Case
    if (balance > 1 && userID > userroot->left->userID) {
        userroot->left = leftRotateuser(userroot->left);
        return rightRotateuser(userroot);
    }

    // Right Left Case
    if (balance < -1 && userID < userroot->right->userID) {
        userroot->right = rightRotateuser(userroot->right);
        return leftRotateuser(userroot);
    }

    // return the (unchanged) node pointer
    return userroot;
}

// Function to search Audiobook by AudiobookID
void searchAudiobook(struct Node *node, int AudiobookID) {
    if (node == NULL) {
        printf("Audiobook not found\n");
        return;
    }
    struct Node *temp = node;
    while (temp != NULL) {
        if (temp->AudiobookID == AudiobookID) {
            printf("Audiobook found\n");
            printf("AudiobookID: %d\nTitle: %s\nAuthor: %s\nNarrator: %s\nDuration: %.2f\nGenre: %s\nRating: %.2f\n", temp->AudiobookID, temp->Title, temp->Author, temp->Narrator, temp->Duration, temp->Genre, temp->Rating);
            return;
        } else if (temp->AudiobookID > AudiobookID) {
            temp = temp->left;
        } else {
            temp = temp->right;
        }
    }
    printf("Audiobook not found\n");
}

// Function to search User by userID
void searchUser(struct user *node, int userID) {
    if (node == NULL) {
        printf("User not found\n");
        return;
    }
    struct user *temp = node;
    while (temp != NULL) {
        if (temp->userID == userID) {
            printf("User found\n");
            printf("UserID: %d\nName: %s\nEmail: %s\nPreferences: %s\n", temp->userID, temp->Name, temp->Email, temp->Preferences);
            return;
        } else if (temp->userID > userID) {
            temp = temp->left;
        } else {
            temp = temp->right;
        }
    }
    printf("User not found\n");
}

// Function to find the node with minimum value in a tree rooted with node
struct Node *minValueNode(struct Node *node) {
    struct Node *current = node;
    while (current->left != NULL)
        current = current->left;
    return current;
}

// Function to find the node with minimum value in a tree rooted with node for User
struct user *minValueUser(struct user *node) {
    struct user *current = node;
    while (current->left != NULL)
        current = current->left;
    return current;
}

// Function to delete a node with given key from AVL tree for Audiobook
struct Node *deleteNodeAudiobook(struct Node *root, int AudiobookID) {
    if (root == NULL) {
        return root;
    }
    if (AudiobookID < root->AudiobookID) {
        root->left = deleteNodeAudiobook(root->left, AudiobookID);
    } else if (AudiobookID > root->AudiobookID) {
        root->right = deleteNodeAudiobook(root->right, AudiobookID);
    } else {
        if ((root->left == NULL) || (root->right == NULL)) {
            struct Node *temp = root->left ? root->left : root->right;
            if (temp == NULL) {
                temp = root;
                root = NULL;
            } else {
                *root = *temp;
            }
            free(temp);
        } else {
            struct Node *temp = minValueNode(root->right);
            root->AudiobookID = temp->AudiobookID;
            root->right = deleteNodeAudiobook(root->right, temp->AudiobookID);
        }
    }
    if (root == NULL) {
        return root;
    }
    root->heightaudiobook = 1 + max(heightaudiobook(root->left), heightaudiobook(root->right));

    // Get the balance factor of this ancestor node
    int balance = getBalanceaudiobook(root);

    // If this node becomes unbalanced, then there are four cases

    // Left Left Case
    if (balance > 1 && AudiobookID < root->left->AudiobookID)
        return rightRotateaudiobook(root);

    // Right Right Case
    if (balance < -1 && AudiobookID > root->right->AudiobookID)
        return leftRotateaudiobook(root);

    // Left Right Case
    if (balance > 1 && AudiobookID > root->left->AudiobookID) {
        root->left = leftRotateaudiobook(root->left);
        return rightRotateaudiobook(root);
    }

    // Right Left Case
    if (balance < -1 && AudiobookID < root->right->AudiobookID) {
        root->right = rightRotateaudiobook(root->right);
        return leftRotateaudiobook(root);
    }

    // return the (unchanged) node pointer
    return root;
}

// Function to delete a node with given key from AVL tree for User
struct user *deleteNodeUser(struct user *root, int userID) {
    if (root == NULL) {
        return root;
    }
    if (userID < root->userID) {
        root->left = deleteNodeUser(root->left, userID);
    } else if (userID > root->userID) {
        root->right = deleteNodeUser(root->right, userID);
    } else {
        if ((root->left == NULL) || (root->right == NULL)) {
            struct user *temp = root->left ? root->left : root->right;
            if (temp == NULL) {
                temp = root;
                root = NULL;
            } else {
                *root = *temp;
            }
            free(temp);
        } else {
            struct user *temp = minValueUser(root->right);
            root->userID = temp->userID;
            root->right = deleteNodeUser(root->right, temp->userID);
        }
    }
    if (root == NULL) {
        return root;
    }
    root->heightuser = 1 + max(heightuser(root->left), heightuser(root->right));

    // Get the balance factor of this ancestor node
    int balance = getBalanceuser(root);

    // If this node becomes unbalanced, then there are four cases

    // Left Left Case
    if (balance > 1 && userID < root->left->userID)
        return rightRotateuser(root);

    // Right Right Case
    if (balance < -1 && userID > root->right->userID)
        return leftRotateuser(root);

    // Left Right Case
    if (balance > 1 && userID > root->left->userID) {
        root->left = leftRotateuser(root->left);
        return rightRotateuser(root);
    }

    // Right Left Case
    if (balance < -1 && userID < root->right->userID) {
        root->right = rightRotateuser(root->right);
        return leftRotateuser(root);
    }

    // return the (unchanged) node pointer
    return root;
}
struct user *insertLibraryNode(struct user *libraryRoot, int audiobookID, const char *title) {
    if (libraryRoot == NULL) {
        struct user *newLibraryNode = (struct user *)malloc(sizeof(struct user));
        if (newLibraryNode == NULL) {
            printf("Memory allocation failed\n");
            return NULL;
        }
        
        newLibraryNode->userID = audiobookID;
        strcpy(newLibraryNode->Name, title);
        newLibraryNode->Library = NULL;
        newLibraryNode->left = NULL;
        newLibraryNode->right = NULL;
        return newLibraryNode;
    }
    
    if (audiobookID < libraryRoot->userID) {
        libraryRoot->left = insertLibraryNode(libraryRoot->left, audiobookID, title);
    } else if (audiobookID > libraryRoot->userID) {
        libraryRoot->right = insertLibraryNode(libraryRoot->right, audiobookID, title);
    } else {
        printf("Audiobook already exists in the library.\n");
        return libraryRoot;
    }
    
    libraryRoot->heightuser = 1 + max(heightuser(libraryRoot->left), heightuser(libraryRoot->right));
    
    int balance = getBalanceuser(libraryRoot);
    
    if (balance > 1 && audiobookID < libraryRoot->left->userID) {
        return rightRotateuser(libraryRoot);
    }
    if (balance < -1 && audiobookID > libraryRoot->right->userID) {
        return leftRotateuser(libraryRoot);
    }
    if (balance > 1 && audiobookID > libraryRoot->left->userID) {
        libraryRoot->left = leftRotateuser(libraryRoot->left);
        return rightRotateuser(libraryRoot);
    }
    if (balance < -1 && audiobookID < libraryRoot->right->userID) {
        libraryRoot->right = rightRotateuser(libraryRoot->right);
        return leftRotateuser(libraryRoot);
    }
    
    return libraryRoot;
}

void adduserlibrary(struct Node *Audiobook, struct user *root, int userID, int audiobookID) {
    if (root == NULL) {
        printf("User not found\n");
        return;
    }
    if (Audiobook == NULL) {
        printf("Audiobook not found\n");
        return;
    }
    
    struct user *temp = root;
    struct Node *tempaudi = Audiobook;
    
    while (temp != NULL) {
        if (temp->userID == userID) {
            while (tempaudi != NULL) {
                if (tempaudi->AudiobookID == audiobookID) {
                    temp->Library = insertLibraryNode(temp->Library, audiobookID, tempaudi->Title);
                    printf("Audiobook added to user's library.\n");
                    return;
                } else if (tempaudi->AudiobookID > audiobookID) {
                    tempaudi = tempaudi->left;
                } else {
                    tempaudi = tempaudi->right;
                }
            }
            printf("Audiobook not found\n");
            return;
        } else if (temp->userID > userID) {
            temp = temp->left;
        } else {
            temp = temp->right;
        }
    }
    
    printf("User not found\n");
}

// Function to print preorder traversal of the tree.
// The function also prints height of every node for Audiobook
void postOrderAudiobook(struct Node *root) {
    if (root != NULL) {
        postOrderAudiobook(root->left);
        printf("%d ", root->AudiobookID);
        postOrderAudiobook(root->right);
    }
}

// Function to print preorder traversal of the tree.
// The function also prints height of every node for User
void postOrderUser(struct user *root) {
    if (root != NULL) {
        postOrderUser(root->left);
        printf("%d ", root->userID);
        postOrderUser(root->right);
    }
}
 
void postOrderUserLibrary(struct user *libraryRoot) {
    if (libraryRoot != NULL) {
        postOrderUserLibrary(libraryRoot->left);
        printf("%d ", libraryRoot->userID);
        postOrderUserLibrary(libraryRoot->right);
    }
}

// Function to print the listening history report for a user
void ListeningHistoryReportUser(struct user *head, int UserID) {
    struct user *currUser = head;
    while (currUser != NULL) {
        if (currUser->userID == UserID) {
            struct user *currentAudiobook = currUser->Library;
            postOrderUserLibrary(currentAudiobook);
            return;
        } else if (currUser->userID > UserID) {
            currUser = currUser->left;
        } else {
            currUser = currUser->right;
        }
    }
    printf("User with ID %d not found.\n", UserID);
}


void rateAudiobook(struct Node *root,  int audiobookID, float rating) {
    if (root == NULL) {
        printf("Audiobook database is empty.\n");
        return;
    }

    // Find the audiobook with the specified audiobookID
    struct Node *current = root;
    while (current != NULL) {
        if (audiobookID == current->AudiobookID) {
            // Update the rating of the audiobook
            printf("Updating rating for Audiobook ID %d...\n", audiobookID);
            
            current->Rating = ((current->Rating*(current->count-1)) + rating)/current->count;
            current->count=current->count + 1;
            printf("rating of AudiobookID %d is %.2f ",audiobookID,current->Rating);
            printf("Rating updated successfully.\n");
            return;
        } else if (audiobookID < current->AudiobookID) {
            current = current->left;
        } else {
            current = current->right;
        }
    }
    printf("Audiobook with ID %d not found.\n", audiobookID);
}

void mostpopularAudiobookUtil(struct Node *root, struct Node **mostpopular) {
    if (root == NULL) {
        return;
    }

    // Recursively search left subtree
    mostpopularAudiobookUtil(root->left, mostpopular);

    // Compare current node's rating with most popular node's rating
    if (*mostpopular == NULL || root->Rating > (*mostpopular)->Rating) {
        *mostpopular = root;
    }

    // Recursively search right subtree
    mostpopularAudiobookUtil(root->right, mostpopular);
}

void mostpopularAudiobook(struct Node *root) {
    if (root == NULL) {
        printf("Tree is empty.\n");
        return;
    }

    struct Node *mostpopular = NULL;
    mostpopularAudiobookUtil(root, &mostpopular);

    // Print the most popular Audiobook ID
    printf("Most popular Audiobook: %d\n", mostpopular->AudiobookID);
}
 
void ListeningHistoryReportAudiobook(struct user *libraryRoot, int audiobookID) {
    if (libraryRoot != NULL) {
       ListeningHistoryReportAudiobook(libraryRoot->left, audiobookID);
        if (libraryRoot->Library != NULL) {
            struct user *current = libraryRoot->Library;
            while (current != NULL) {
                if (current->userID == audiobookID) {
                    printf("%d ", libraryRoot->userID);
                    break;
                }
                current = current->Library;
            }
        }
       ListeningHistoryReportAudiobook(libraryRoot->right, audiobookID);
    }
}


void rangesearchaudiobook(struct Node *root, int ID1, int ID2) {
    if (root == NULL) {
        return;
    }

     
    if (root->AudiobookID >= ID1 && root->AudiobookID <= ID2) {
        printf("Title: %s\n", root->Title);
    }
 
    if (root->AudiobookID > ID1) {
        rangesearchaudiobook(root->left, ID1, ID2);
    }
 
    if (root->AudiobookID < ID2) {
        rangesearchaudiobook(root->right, ID1, ID2);
    }
}
 

void listeningProgress(struct user *root, struct Node *node, int userID, int audiobookID, int progress) {
    struct user *user1 = root;

    // Search for the user
    while (user1 != NULL) {
        if (user1->userID == userID) {
            // User found, now iterate through the user's library
            struct Node *curr = user1->Library;
            while (curr != NULL) {
                if (curr->AudiobookID == audiobookID) {
                    // Audiobook found in the user's library, update its duration
                    curr->Duration += progress;
                    printf("Listening progress updated for User ID %d, Audiobook ID %d\n", userID, audiobookID);
                    return;
                } else if (curr->AudiobookID > audiobookID) {
                    curr = curr->left;
                } else {
                    curr = curr->right;
                }
            }
            // Audiobook not found in the user's library
            printf("Audiobook with ID %d not found in User ID %d's library.\n", audiobookID, userID);
            return;
        } else if (user1->userID < userID) {
            user1 = user1->right;
        } else {
            user1 = user1->left;
        }
    }
    // User not found
    printf("User with ID %d not found.\n", userID);
}


void editAudiobookNode(struct Node *node) {
    int choice;
    printf("Select the field to edit:\n");
    printf("1. Title\n");
    printf("2. Author\n");
    printf("3. Narrator\n");
    printf("4. Duration\n");
    printf("5. Genre\n");
    printf("6. Sum of Ratings\n");
    printf("7. Count of Ratings\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            printf("Enter new Title: ");
            scanf(" %[^\n]", node->Title);
            break;
        case 2:
            printf("Enter new Author: ");
            scanf(" %[^\n]", node->Author);
            break;
        case 3:
            printf("Enter new Narrator: ");
            scanf(" %[^\n]", node->Narrator);
            break;
        case 4:
            printf("Enter new Duration (in minutes): ");
            scanf("%d", &node->Duration);
            break;
        case 5:
            printf("Enter new Genre: ");
            scanf(" %[^\n]", node->Genre);
            break;
        case 6:
            printf("Enter new Sum of Ratings: ");
            scanf("%f", &node-> Rating);
            break;
        case 7:
            printf("Enter new Count of Ratings: ");
            scanf("%d", &node->count );
            break;
        default:
            printf("Invalid choice.\n");
            break;
    }
}

void editAudiobook(struct Node  **root, int audiobookID) {
    struct Node *current = *root;
    while (current != NULL) {
        if (audiobookID == current->AudiobookID) {
            editAudiobookNode(current);
            printf("Audiobook with ID %d edited successfully.\n", audiobookID);
            return;
        } else if (audiobookID < current->AudiobookID) {
            current = current->left;
        } else {
            current = current->right;
        }
    }
    printf("Audiobook with ID %d not found.\n", audiobookID);
}




FILE *createFile(const char *filename) {
    FILE *file = fopen(filename, "a");
    fclose(file);
    return fopen(filename, "r+");
}
// // // Function to save User data to a file
// void saveUserToFile(struct User *head, const char *filename) {
//     FILE *file = createFile(filename);
//     if (file == NULL) {
//         perror("Error opening file");
//         return;
//     }
//     struct user *temp = head;
//     while (temp != NULL) {
//         fprintf(file, "%d,%s,%s,%s\n", temp->userID, temp->Name, temp->Email, temp->Preferences);
//         temp = temp->next;
//     }
//     fclose(file);
// }

// // Function to load Audiobook data from a file
struct Node* loadAudiobookFromFile(struct Node *head, const char *filename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        return head; // Return head as it is if file cannot be opened
    }

    int AudiobookID;
    char Title[50], Author[50], Narrator[50], Genre[50];
    float Duration, Rating;

    while (fscanf(file, "%d,%49[^,],%49[^,],%49[^,],%f,%49[^,],%f\n",
                  &AudiobookID, Title, Author, Narrator, &Duration, Genre, &Rating) == 7) {
        head = insertAudiobook(head, AudiobookID, Title, Author, Narrator, Duration, Genre, Rating);
    }

    fclose(file);
    return head;
}

struct user* loadUserFromFile(struct user *head, const char *filename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        return head; // Return head as it is if file cannot be opened
    }

    int userID;
    char Name[50], Email[50], Preferences[100];

    while (fscanf(file, "%d,%49[^,],%49[^,],%99[^\n]\n", &userID, Name, Email, Preferences) == 4) {
        head = insertUser(head, userID, Name, Email, Preferences);
    }

    fclose(file);
    return head;
}

// void saveAudiobookToFile(struct Node *head, const char *filename) {
//     FILE *file = createFile(filename);
//     if (file == NULL) {
//         perror("Error opening file");
//         return;
//     }
//     struct Node *temp = head;
//     while (temp != NULL) {
//         fprintf(file, "%d,%s,%s,%s,%.2f,%s,%.1f\n",
//                 temp->AudiobookID, temp->Title, temp->Author, temp->Narrator, temp->Duration, temp->Genre, temp->Rating);
//         temp = temp->next;
//     }
//     fclose(file);
// }




// void freeAudiobookList(struct Audiobook **head) {
//     struct Audiobook *current = *head;
//     while (current != NULL) {
//         struct Audiobook *temp = current;
//         current = current->next;
//         free(temp);
//     }
//     *head = NULL; // Update head pointer to NULL after freeing all nodes
// }

// void freeUserList(struct User **head) {
//     struct User *current = *head;
//     while (current != NULL) {
//         struct User *temp = current;
//         current = current->next;
//         free(temp);
//     }
//     *head = NULL; // Update head pointer to NULL after freeing all nodes
// }

// Driver program to test above functions
int main() {
     
    struct Node *audiobookHead = NULL;
    struct user *userHead = NULL;

    // Load audiobook and user data from files
    audiobookHead = loadAudiobookFromFile(audiobookHead, "audiobooks.txt");
    userHead = loadUserFromFile(userHead, "users.txt");

    int choice;

    do {
        // Display menu options
        printf("\n------ Audiobook Library System ------\n");
        printf("1. Add Audiobook\n");
        printf("2. Delete Audiobook\n");
        printf("3. Search Audiobook\n");
        printf("4. Add User Profile\n");
        printf("5. Add to User Library\n");
        printf("6. Listening Progress\n");
        printf("7. Display Users \n");
        printf("8. Rate Audiobook\n");
        printf("9. Most Popular Audiobook\n");
        printf("10. Listening History Report (User)\n");
        printf("12. Listening History Report (Audiobook)\n");
        printf("13. Display Audiobook List\n");
        printf("14. edit audiobook List\n");
        printf("15. RAnge search Audiobook \n");
        printf("0. Exit\n");
        printf("-------------------------------------\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: {
            // Add Audiobook
                int AudiobookID;
                char Title[size], Author[size], Narrator[size], Genre[size];
                float Duration, Rating;
                
                printf("Enter Audiobook ID: ");
                scanf("%d", &AudiobookID);
                printf("Enter Title: ");
                scanf("%s", Title);
                printf("Enter Author: ");
                scanf("%s", Author);
                printf("Enter Narrator: ");
                scanf("%s", Narrator);
                printf("Enter Duration: ");
                scanf("%f", &Duration);
                printf("Enter Genre: ");
                scanf("%s", Genre);
                printf("Enter Rating: ");
                scanf("%f", &Rating);
                
              audiobookHead = insertAudiobook(audiobookHead, AudiobookID,Author, Title, Narrator, Duration, Genre, Rating);

                // saveAudiobookToFile(audiobookHead, "audiobooks.txt");
                printf("Audiobook added successfully.\n");
                break;
            }
            case 2: {
                // Delete Audiobook
                int deleteTitle ;
                printf("Enter ID of the audiobook to delete: ");
                scanf("%d", &deleteTitle);
                audiobookHead = deleteNodeAudiobook(audiobookHead, deleteTitle);

                // deleteAudiobookFromFile(audiobookHead, "audiobooks.txt");
                break;
            }
            case 3: {
                // Search Audiobook
                int AudiobookID;
                printf("Enter search criteria AudiobookID  : ");
                scanf("%d", &AudiobookID);
                searchAudiobook(audiobookHead, AudiobookID);
                break;
            }
            case 4: {
                // Add User Profile
                int userID;
                char Name[size], Email[size], Preferences[size];
                
                printf("Enter User ID: ");
                scanf("%d", &userID);
                printf("Enter Name: ");
                scanf("%s", Name);
                printf("Enter Email: ");
                scanf("%s", Email);
                printf("Enter Preferences: ");
                scanf("%s", Preferences);
                
                userHead = insertUser(userHead, userID, Name, Email, Preferences);
                // saveUserToFile(userHead, "users.txt");

                printf("User profile created successfully.\n");
                break;
            }
            case 5: {
                // Add to User Library
                int userID, audiobookID;
                
                printf("Enter User ID: ");
                scanf("%d", &userID);
                printf("Enter Audiobook ID: ");
                scanf("%d", &audiobookID);
                
                adduserlibrary(audiobookHead,userHead, userID,  audiobookID);
                printf("Audiobook added to the user's library successfully.\n");
                break;
            }
            case 6: {
                // Listening Progress
                int userID, audiobookID;
                float progress;
                
                printf("Enter User ID: ");
                scanf("%d", &userID);
                printf("Enter Audiobook ID: ");
                scanf("%d", &audiobookID);
                printf("Enter Listening Progress (percentage): ");
                scanf("%d", &progress);
                
                listeningProgress(userHead, audiobookHead,userID, audiobookID, progress);
                printf("Listening progress updated successfully.\n");
                break;
            }
            case 7: {
                // Display User Libraries
                postOrderUser(userHead);
                break;
            }
            case 8: {
                // Rate Audiobook
                int audiobookID;
                float rating;
                
                printf("Enter Audiobook ID: ");
                scanf("%d", &audiobookID);
                printf("Enter rating (1 to 5): ");
                scanf("%f", &rating);
                
                rateAudiobook(audiobookHead,audiobookID,rating);
                 
                printf("Rating updated successfully.\n");
                break;
            }
            case 9: {
                // Most Popular Audiobook
                mostpopularAudiobook(audiobookHead);
                break;
            }
            case 10: {
                // Listening History Report (User)
                int userID;
                
                printf("Enter User ID: ");
                scanf("%d", &userID);
                
                ListeningHistoryReportUser(userHead, userID);
                break;
            }
             
            case 12: {
                // Listening History Report (Audiobook)
                int audiobookID;
                
                printf("Enter Audiobook ID: ");
                scanf("%d", &audiobookID);
                
                ListeningHistoryReportAudiobook(userHead, audiobookID);
                break;
            }
            case 13: {
                // Display Audiobook List
               postOrderAudiobook(audiobookHead);
                break;
            }
            case 14: {
                // edit Audiobook List
                int n;
                printf("enter audiobookID: ");
                scanf("%d ",&n);
                editAudiobook(&audiobookHead, n);
                break;
            }
            case 15:{
                int id1,id2;
                printf("enter id1 :\n");
                scanf("%d",&id1);
                printf("\n");
                printf("enter id2 :\n");
                scanf("%d",&id2);
                printf("\n");
                rangesearchaudiobook(audiobookHead, id1,  id2);
            }
            // case 0: {
            //     // Exit
            //     freeAudiobookList(&audiobookHead);
            //     freeUserList(&userHead);
            //     printf("Exiting program. Goodbye!\n");
            //     break;
            // }
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 0);
    
    


    return 0;
}
